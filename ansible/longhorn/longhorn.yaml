- name: 'configure all nodes'
  hosts: all
  become: true
  tasks:
    - name: 'install longhorn dependencies'
      ansible.builtin.apt:
        name:
          - 'open-iscsi'
          - 'cryptsetup'

    - name: 'enable /proc/config.gz'
      community.general.modprobe:
        name: 'configs'
        persistent: present

    - name: 'enable encryption kmod'
      community.general.modprobe:
        name: 'dm_crypt'
        persistent: present

- name: 'configure storage nodes'
  hosts: storage
  become: true
  tasks:
    - name: 'install storage utilities'
      ansible.builtin.apt:
        name:
          - 'hdparm'
          - 'smartmontools'

    - name: 'get disk path'
      ansible.builtin.shell:
        cmd: 'smartctl --scan -d sat -j | jq -r .devices[].name'
      register: longhorn_disk_path_result
      changed_when: false

    - name: 'ensure exactly one disk present'
      ansible.builtin.assert:
        that: "longhorn_disk_path_result.stdout | split('\n') | length == 1"
        fail_msg: 'node must have exactly one storage disk'

    - name: 'create longhorn-data partition'
      community.general.parted:
        device: "{{ longhorn_disk_path_result.stdout }}"
        label: gpt
        name: 'longhorn-data'
        number: 1
        state: present
        fs_type: ext4

    - name: 'create ext4 fs on longhorn-data partition'
      community.general.filesystem:
        dev: '/dev/disk/by-partlabel/longhorn-data'
        fstype: ext4

    - name: 'create hdd-keepawake service'
      ansible.builtin.copy:
        src: 'hdd-keepawake@.service'
        dest: '/etc/systemd/system/hdd-keepawake@.service'

    - name: 'enable hdd-keepawake service'
      ansible.builtin.systemd:
        name: 'hdd-keepawake@longhorn-data'
        state: started
        enabled: true
        daemon_reload: true

    - name: 'check if longhorn mount is valid'
      ansible.builtin.command:
        cmd: 'findmnt /dev/disk/by-partlabel/longhorn-data'
      register: check_longhorn_mount_result
      changed_when: false
      failed_when: false

    # remounted doesn't work, have to explicitly unmount + mount
    - name: 'unmount /var/lib/longhorn'
      ansible.posix.mount:
        path: '/var/lib/longhorn'
        state: unmounted
      when: check_longhorn_mount_result.rc != 0

    - name: 'mount longhorn-data to /var/lib/longhorn'
      ansible.posix.mount:
        path: '/var/lib/longhorn'
        src: '/dev/disk/by-partlabel/longhorn-data'
        fstype: ext4
        opts: 'defaults,noatime'
        state: mounted
      when: check_longhorn_mount_result.rc != 0

    - name: 'label storage nodes to be used with longhorn'
      become: false
      delegate_to: localhost
      kubernetes.core.k8s:
        definition:
          apiVersion: v1
          kind: Node
          metadata:
            name: "{{ inventory_hostname_short }}"
            labels:
              node.longhorn.io/create-default-disk: 'true'

- name: 'install longhorn'
  hosts: localhost
  tasks:
    - name: 'add longhorn helm repo'
      kubernetes.core.helm_repository:
        name: 'longhorn'
        repo_url: 'https://charts.longhorn.io'

    - name: 'install longhorn'
      kubernetes.core.helm:
        name: 'longhorn'
        chart_ref: 'longhorn/longhorn'
        release_namespace: 'longhorn-system'
        create_namespace: true
        values_files:
          - 'values.yaml'

    # https://kubernetes.io/docs/concepts/storage/storage-classes/#default-storageclass
    - name: 'unset local-path storage class as default'
      kubernetes.core.k8s:
        state: patched
        definition:
          apiVersion: v1
          kind: StorageClass
          metadata:
            name: 'local-path'
            annotations:
              storageclass.kubernetes.io/is-default-class: 'false'
